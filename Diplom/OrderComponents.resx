<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>